ggplot(df2)
df2 <- df1 %>%
{
if (!is.na(group)) {
group_by(RCP) %>%
summarise(Mean=mean(rain))
}
else {.}
}
group=NULL
df2 <- df1 %>%
{
if (!is.null(group)) {
group_by(RCP) %>%
summarise(Mean=mean(rain))
}
else {.}
}
df2
group="RCP"
df2 <- df1 %>%
{
if (!is.null(group)) {
group_by(group) %>%
summarise(Mean=mean(rain))
}
else {.}
}
group="RCP"
df2 <- df1 %>%
{
if (!is.null(group)) {
group_by(paste(group)) %>%
summarise(Mean=mean(rain))
}
else {.}
}
df2 <- df1 %>%
{
if (!is.null(group)) {
group_by(RCP) %>%
summarise(Mean=mean(rain))
}
else {.}
}
group_by(., RCP) %>%
summarise(Mean=mean(rain))
df1 <- data.frame(model=rep("RegC4", 4), rain=c(2,3,4,5), RCP=c("rcp2.6", "rcp2.6", "rcp8.5", "rcp8.5"))
group="RCP"
df2 <- df1 %>%
{
if (!is.null(group)) {
group_by(., RCP) %>%
summarise(Mean=mean(rain))
}
else {.}
}
df2
library(loadeR)
dataInventory("/home/riccardo/Downloads/copernicus-tmp-data/CMEMS-OCEANCOLOUR_009_082-several_vars-2002.nc")
library(leaflet)
library(leaflet)
arpav <-
leaflet() %>%
addProviderTiles()
arpav <-
leaflet() %>%
addTiles() %>%
addMarkers(lng=12.002917, lat=45.889114, popup="The birthplace of R")
leaflet() %>%
addTiles() %>%
addMarkers(lng=12.002917, lat=45.889114, popup="The birthplace of R")
library(loadeR)
dataInventory("/home/riccardo/Downloads/PP/CMEMS-OCEANCOLOUR_PP_009_082--1997_2021.nc")
out <- dataInventory("/home/riccardo/Downloads/PP/CMEMS-OCEANCOLOUR_PP_009_082--1997_2021.nc")
out$PP
library(loadeR)
PP <- loadGridData("~/Downloads/PP/CMEMS-OCEANCOLOUR_PP_009_082--1997_2021.nc", var = "PP")
PP <- loadGridData("~/Downloads/PP/CMEMS-OCEANCOLOUR_PP_009_082--1997_2021.nc", var = "pp")
dataInventory("/home/riccardo/Downloads/PP/CMEMS-OCEANCOLOUR_PP_009_082--1997_2021.nc")
PP <- loadGridData("/home/riccardo//Downloads/PP/CMEMS-OCEANCOLOUR_PP_009_082--1997_2021.nc", var = "PP")
PP <- loadGridData("/home/riccardo//Downloads/PP/CMEMS-OCEANCOLOUR_PP_009_082--1997_2021.nc", var = "PP", lonLim = c(-10,0), latLim = c(0,20))
PP$xyCoords
library(raster)
library(raster)
clim <- climatology(PP)
library(transformeR)
clim <- climatology(PP)
View(clim)
try_rst <- raster(
clim$Data,
xmn = min(clim$xyCoords$x),
xmx = max(clim$xyCoords$x),
ymn = min(clim$xyCoords$y),
ymx = max(clim$xyCoords$y)
) %>%
flip(., direction = 'y')
library(tidyverse)
try_rst <- raster(
clim$Data,
xmn = min(clim$xyCoords$x),
xmx = max(clim$xyCoords$x),
ymn = min(clim$xyCoords$y),
ymx = max(clim$xyCoords$y)
) %>%
flip(., direction = 'y')
raster(
clim$Data,
xmn = min(clim$xyCoords$x),
xmx = max(clim$xyCoords$x),
ymn = min(clim$xyCoords$y),
ymx = max(clim$xyCoords$y)
)
dim(  clim$Data)
dim(   clim$Data[-1,,])
clim <- dim(PP$Data)
dim(PP$Data)
clim <- apply(PP$Data, c(2,3), mean)
dim(clim)
dim(clim)
try_rst <- raster(
clim
xmn = min(PP$xyCoords$x),
xmx = max(PP$xyCoords$x),
ymn = min(PP$xyCoords$y),
ymx = max(PP$xyCoords$y)
) %>%
flip(., direction = 'y')
try_rst <- raster(
clim,
xmn = min(PP$xyCoords$x),
xmx = max(PP$xyCoords$x),
ymn = min(PP$xyCoords$y),
ymx = max(PP$xyCoords$y)
) %>%
flip(., direction = 'y')
plot(try_rst)
View(try_rst)
summary(try_rst)
try_rst
crs(try_rst) <- CRS("+init=epsg:32662")
rst_new <- projectRaster(try_rst
crs = CRS("+init=epsg:4326"))
rst_new <- projectRaster(try_rst,
crs = CRS("+init=epsg:4326"))
plot(rst_new)
plot(try_rst)
plot(rst_new)
plot(try_rst)
plot(rst_new)
PP <- loadGridData("/home/riccardo//Downloads/PP/CMEMS-OCEANCOLOUR_PP_009_082--1997_2021.nc", var = "PP_error", lonLim = c(-10,0), latLim = c(0,20))
clim <- apply(PP$Data, c(2,3), mean)
try_rst <- raster(
clim,
xmn = min(PP$xyCoords$x),
xmx = max(PP$xyCoords$x),
ymn = min(PP$xyCoords$y),
ymx = max(PP$xyCoords$y)
) %>%
flip(., direction = 'y')
plot(try_rst) EPSG 32662)
plot(try_rst)
dataInventory("/home/riccardo/Downloads/copernicus-processed-data/output.nc")
PP <- loadGridData("/home/riccardo//Downloads/copernicus-processed-data/output.nc", var = "PICO", lonLim = c(-10,0), latLim = c(0,20))
clim <- apply(PP$Data, c(2,3), mean)
try_rst <- raster(
clim,
xmn = min(PP$xyCoords$x),
xmx = max(PP$xyCoords$x),
ymn = min(PP$xyCoords$y),
ymx = max(PP$xyCoords$y)
) %>%
flip(., direction = 'y')
plot(try_rst)
View(PP)
head(PP$Data)
dataInventory("/home/riccardo/Downloads/copernicus-processed-data/output.nc")
PP <- loadGridData("/home/riccardo//Downloads/copernicus-processed-data/CMEMS-OCEANCOLOUR_009_082--2002.nc", var = "PICO", lonLim = c(-10,0), latLim = c(0,20))
clim <- apply(PP$Data, c(2,3), mean)
try_rst <- raster(
clim,
xmn = min(PP$xyCoords$x),
xmx = max(PP$xyCoords$x),
ymn = min(PP$xyCoords$y),
ymx = max(PP$xyCoords$y)
) %>%
flip(., direction = 'y')
plot(try_rst)
View(PP)
PP[["Data"]]
PP <- loadGridData("/home/riccardo//Downloads/copernicus-processed-data/CMEMS-OCEANCOLOUR_009_082--2002.nc", var = "PICO", lonLim = c(-40,10), latLim = c(-5,30))
clim <- apply(PP$Data, c(2,3), mean)
try_rst <- raster(
clim,
xmn = min(PP$xyCoords$x),
xmx = max(PP$xyCoords$x),
ymn = min(PP$xyCoords$y),
ymx = max(PP$xyCoords$y)
) %>%
flip(., direction = 'y')
plot(try_rst)
dataInventory("/home/riccardo/Downloads/copernicus-processed-data/CMEMS-OCEANCOLOUR_009_082--2002.nc")
try <- dataInventory("/home/riccardo/Downloads/copernicus-processed-data/CMEMS-OCEANCOLOUR_009_082--2002.nc")
try <- dataInventory("/home/riccardo/Downloads/copernicus-processed-data/output.nc")
PP <- loadGridData("/home/riccardo//Downloads/copernicus-processed-data/output.nc", var = "PICO", lonLim = c(-40,10), latLim = c(-5,30), years=2003:2004)
clim <- apply(PP$Data, c(2,3), mean)
clim <- apply(PP$Data, c(2,3), mean, na.rm=TRUE)
try_rst <- raster(
clim,
xmn = min(PP$xyCoords$x),
xmx = max(PP$xyCoords$x),
ymn = min(PP$xyCoords$y),
ymx = max(PP$xyCoords$y)
) %>%
flip(., direction = 'y')
plot(try_rst)
clim <- apply(PP$Data, c(2,3), mean)
try_rst <- raster(
clim,
xmn = min(PP$xyCoords$x),
xmx = max(PP$xyCoords$x),
ymn = min(PP$xyCoords$y),
ymx = max(PP$xyCoords$y)
) %>%
flip(., direction = 'y')
plot(try_rst)
clim2 <- climatology(PP)
library(visualizeR)
spatialPlot(clim2)
clim <- apply(PP$Data, c(2,3), mean, na.rm=TRUE)
try_rst <- raster(
clim,
xmn = min(PP$xyCoords$x),
xmx = max(PP$xyCoords$x),
ymn = min(PP$xyCoords$y),
ymx = max(PP$xyCoords$y)
) %>%
flip(., direction = 'y')
plot(try_rst)
library(loadeR)
dataInventory("/home/riccardo/Downloads/hurs_W5E5v1.0_1979_2016.nc")
library(loadeR)
obs <- loadGridData("../riccardo/Downloads/rsds_hurs_W5E5v1.0_1979_2016.nc",
var = "hurs", lonLim = c(25,32), latLim = c(43,50))
View(obs)
common_dates <- function(data) {
# list of models
dates.all = c()
for (imodel in 1:length(data)) {
dates.all = c(dates.all, substr(data[[imodel]]$Dates$start, 1, 10))
}
dates.common = substr(data[[1]]$Dates$start, 1, 10)
for (imodel in 2:length(data)) {
aux = intersect(substr(data[[imodel - 1]]$Dates$start, 1, 10),
substr(data[[imodel]]$Dates$start, 1, 10))
dates.common = intersect(dates.common, aux)
}
for (imodel in 1:length(data)) {
ind = which(!is.na(match(
substr(data[[imodel]]$Dates$start, 1, 10), dates.common
)))
data[[imodel]] = subsetDimension(data[[imodel]], dimension = "time", indices = ind)
}
return(bindGrid(data, dimension = "member"))
}
common_dates <- function(data) {
# list of models
dates.all = c()
for (imodel in 1:length(data)) {
dates.all = c(dates.all, substr(data[[imodel]]$Dates$start, 1, 10))
}
dates.common = substr(data[[1]]$Dates$start, 1, 10)
for (imodel in 2:length(data)) {
aux = intersect(substr(data[[imodel - 1]]$Dates$start, 1, 10),
substr(data[[imodel]]$Dates$start, 1, 10))
dates.common = intersect(dates.common, aux)
}
for (imodel in 1:length(data)) {
ind = which(!is.na(match(
substr(data[[imodel]]$Dates$start, 1, 10), dates.common
)))
data[[imodel]] = subsetDimension(data[[imodel]], dimension = "time", indices = ind)
}
return(bindGrid(data, dimension = "member"))
}
RCMs <- data.frame(RCP=c("historical", "rcp26", "rcp85"))
getwd()
path <- "/home/riccardo/Downloads/"
scenario <- c("historical/", "rcp26/", "rcp85/")
list.files(paste0(path, scenario))
files <- list.files(paste0(path, scenario))
RCMs <- data.frame(RCP=c("historical", "rcp26", "rcp85"), path=files)
View(RCMs)
files <- list.files(paste0(path, scenario), full.names = TRUE)
library(CHAT)
library(chatR)
library(loadeR)
hurs <- load_data(path.to.rcps = "/home/riccardo/Downloads/data/", variable = "hurs",
country = NULL, buffer=1, n.cores = 6, xlim = c(32,37), ylim = c(-3,3))
saveRDS(hurs, "~/Desktop/hurs.rds")
rm(list=ls())
rsds <- load_data(path.to.rcps = "/home/riccardo/Downloads/data/", variable = "rsds",
country = NULL, buffer=1, n.cores = 6, xlim = c(32,37), ylim = c(-3,3))
saveRDS(rsds, "~/Desktop/hurs.rds")
saveRDS(rsds, "~/Desktop/rsds.rds")
library(raster)
try <- getData(name="GADM", country="Somalia", level=1)
try <- getData(name="GADM", country="Somalia", level=1)
try <- getData(name="GADM", country="Somalia", level=1)
try <- getData(name="GADM", country="Somalia", level=1)
library(installr)
install.packages("installr")
library(installr)
copy.packages.between.libraries()
copy.packages.between.libraries(from = "/home/riccardo/R/x86_64-pc-linux-gnu-library/4.1/Tax4Fun2/",
to = "/home/riccardo/R/x86_64-pc-linux-gnu-library/4.2/")
copy.packages.between.libraries(from = "/home/riccardo/R/x86_64-pc-linux-gnu-library/4.1/",
to = "/home/riccardo/R/x86_64-pc-linux-gnu-library/4.2/")
library(Tax4Fun2)
library(tidyverse)
library(data.table)
library(metagMisc)
library(phyloseq)
library(psych)
library(Tax4Fun2)
library(tidyverse)
library(data.table)
library(metagMisc)
library(phyloseq)
library(psych)
metadata <- data.frame(sample_data(ps)) %>%
rename(Accession=Sample_ID)
# otu table with no contaminant, only bacterial reads
ps <- readRDS("../../3.filtering/results/tables/ps.rds")
library(Tax4Fun2)
library(tidyverse)
library(data.table)
library(metagMisc)
library(phyloseq)
library(psych)
library(nonpar)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
# otu table with no contaminant, only bacterial reads
ps <- readRDS("../../3.filtering/results/tables/ps.rds")
ps <- phyloseq_filter_prevalence(ps, prev.trh = 0.01, abund.trh = 20, threshold_condition = "OR", abund.type = "total")
otu.table <- as.data.frame(otu_table(ps)) %>%
add_rownames(var="seq") %>%
mutate(SV=paste0("SV_", 1:n()))
metadata <- data.frame(sample_data(ps)) %>%
rename(Accession=Sample_ID)
rownames(metadata) <- NULL
# 2. Run the reference blast with include_user_data = TRUE and specifiy the path to the user data [here: KELP_UserData/KELP1]
runRefBlast(path_to_otus = "../results/tables/sequences.fasta", path_to_reference_data = "~/tax4Fun2/Tax4Fun2_ReferenceData_v2/", path_to_temp_folder = "../results/tables/prediction", database_mode = "Ref99NR", use_force = T, num_threads = 6, include_user_data = T, path_to_user_data = "~/tax4Fun2/bacteria.plants_reference_data", name_of_user_data = "User_Ref_bac_plant")
# 3. Making the prediction with your data included
makeFunctionalPrediction(path_to_otu_table = "../results/tables/otu.tax4fun.txt", path_to_reference_data = "~/tax4Fun2/Tax4Fun2_ReferenceData_v2/", path_to_temp_folder = "../results/tables/prediction", database_mode = "Ref99NR", normalize_by_copy_number = T, min_identity_to_reference = 0.97, normalize_pathways = F, include_user_data = T, path_to_user_data = "~/tax4Fun2/bacteria.plants_reference_data", name_of_user_data = "User_Ref_bac_plant")
# reading in and calculating proportions
Pathway_prediction <- read.delim("../results/tables/prediction/pathway_prediction.txt", sep = "\t") %>%
filter(!level3%in%c("Human Diseases", "Organismal Systems"))
sum(Pathway_prediction$G10024)
Functional_prediction <- read.delim("../results/tables/prediction/functional_prediction.txt", sep = "\t")
sum(Functional_prediction$G106)
# 3. Making the prediction with your data included
makeFunctionalPrediction(path_to_otu_table = "../results/tables/otu.tax4fun.txt", path_to_reference_data = "~/tax4Fun2/Tax4Fun2_ReferenceData_v2/", path_to_temp_folder = "../results/tables/prediction", database_mode = "Ref99NR", normalize_by_copy_number = T, min_identity_to_reference = 0.99, normalize_pathways = F, include_user_data = T, path_to_user_data = "~/tax4Fun2/bacteria.plants_reference_data", name_of_user_data = "User_Ref_bac_plant")
library(Tax4Fun2)
library(tidyverse)
library(data.table)
library(metagMisc)
library(phyloseq)
library(psych)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
# otu table with no contaminant, only bacterial reads
ps <- readRDS("../../3.filtering/results/tables/ps.rds")
ps <- phyloseq_filter_prevalence(ps, prev.trh = 0.01, abund.trh = 20, threshold_condition = "OR", abund.type = "total")
otu.table <- as.data.frame(otu_table(ps)) %>%
add_rownames(var="seq") %>%
mutate(SV=paste0("SV_", 1:n()))
metadata <- data.frame(sample_data(ps)) %>%
rename(Accession=Sample_ID)
rownames(metadata) <- NULL
# adonis ------------------------------------------------------------------
adon <- read.delim("../results/tables/prediction/functional_prediction.txt", sep = "\t") %>%
select(-description) %>%
t()
colnames(adon) <- adon[1,]
adon <- as.data.frame(adon[-1,]) %>%
mutate_all(as.numeric)
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
library(Tax4Fun2)
library(tidyverse)
library(data.table)
library(metagMisc)
library(phyloseq)
library(psych)
source("~/stripes.R")
library(vegan)
# adonis ------------------------------------------------------------------
adon <- read.delim("../results/tables/prediction/functional_prediction.txt", sep = "\t") %>%
select(-description) %>%
t()
colnames(adon) <- adon[1,]
adon <- as.data.frame(adon[-1,]) %>%
mutate_all(as.numeric)
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison", permutations = 9999) # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison", permutations = 9999) # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison", permutations = 9999) # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison", permutations = 9999) # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison", permutations = 9999) # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison", permutations = 9999) # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
library(Tax4Fun2)
library(tidyverse)
library(data.table)
library(metagMisc)
library(phyloseq)
library(psych)
# reading in and calculating proportions
Pathway_prediction <- read.delim("../results/tables/prediction/pathway_prediction.txt", sep = "\t") %>%
filter(!level3%in%c("Human Diseases", "Organismal Systems"))
Pathway_prediction2 <- Pathway_prediction %>%
select(-level2, -level3) %>%
pivot_longer(cols = 2:66, names_to = "Accession", values_to = "Pathway") %>%
left_join(., select(metadata, Accession, Status)) %>%
mutate(Pathway=Pathway*100)
colnames(Pathway_prediction)
colnames(Pathway_prediction2)
out <- sapply(unique(Pathway_prediction2$pathway), function(x) {
new <- Pathway_prediction2 %>%
filter(pathway==x)
boot.t.test(filter(new, Status=="Wild")$Pathway, filter(new, Status=="Domesticated")$Pathway, reps=1000)$boot.p.value
})
# adonis ------------------------------------------------------------------
adon <- read.delim("../results/tables/prediction/functional_prediction.txt", sep = "\t") %>%
select(-description) %>%
t()
colnames(adon) <- adon[1,]
adon <- as.data.frame(adon[-1,]) %>%
mutate_all(as.numeric)
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
library(Tax4Fun2)
library(tidyverse)
library(data.table)
library(metagMisc)
library(phyloseq)
library(psych)
source("~/stripes.R")
library(nonpar)
library(vegan)
# adonis ------------------------------------------------------------------
adon <- read.delim("../results/tables/prediction/functional_prediction.txt", sep = "\t") %>%
select(-description) %>%
t()
colnames(adon) <- adon[1,]
adon <- as.data.frame(adon[-1,]) %>%
mutate_all(as.numeric)
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
library(Tax4Fun2)
library(tidyverse)
library(metagMisc)
library(phyloseq)
library(vegan)
library(Tax4Fun2)
library(tidyverse)
library(metagMisc)
library(phyloseq)
library(vegan)
library(Tax4Fun2)
library(tidyverse)
library(metagMisc)
library(phyloseq)
library(vegan)
# prepare metadata
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# otu table with no contaminant, only bacterial reads
ps <- readRDS("../data/Phyloseq_data/ps_sv_PVC.rds")
ps <- phyloseq_filter_prevalence(ps, prev.trh = 0.01, abund.trh = 20, threshold_condition = "OR", abund.type = "total")
otu.table <- as.data.frame(otu_table(ps)) %>%
add_rownames(var="seq") %>%
mutate(SV=paste0("SV_", 1:n()))
metadata <- data.frame(sample_data(ps)) %>%
rename(Accession=Sample_ID)
rownames(metadata) <- NULL
# adonis ------------------------------------------------------------------
adon <- read.delim("../data/functions_data/functional_prediction_PVC.txt", sep = "\t") %>%
select(-description) %>%
t()
colnames(adon) <- adon[1,]
adon <- as.data.frame(adon[-1,]) %>%
mutate_all(as.numeric)
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data has being log transformed
?adonis2
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data is compositional
set.seed(10)
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data is compositional
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data is compositional
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data is compositional
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data is compositional
adonis2(adon ~ Status, data=metadata, method = "robust.aitchison") # used because data is compositional
